stages:
  - prepare
  - fetch-version
  - container-build
  - merge

variables:
  OPENJDK_VERSION: '24'

build-container-img:
  stage: prepare
  variables:
    ARCH: amd64
  tags:
    -  saas-linux-small-${ARCH}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # build the container image for the current arch using kaniko
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --cache=true
      --cache-repo "${CI_REGISTRY_IMAGE}/buildcache"
      --dockerfile "${CI_PROJECT_DIR}/build/tools.Containerfile"
      --destination "${CI_REGISTRY_IMAGE}/buildimage:latest"

fetch-version:
  stage: fetch-version
  variables:
    ARCH: amd64
  tags:
    -  saas-linux-small-${ARCH}
  image:
    name: "${CI_REGISTRY_IMAGE}/buildimage:latest"
    entrypoint: [""]
  script:
    # build the container image for the current arch using kaniko
    - |
      bash ./getpaper.sh
  artifacts:
    reports:
      dotenv: .dotenv

build-container-arm64:
  stage: container-build
  variables:
    ARCH: arm64
  tags:
    -  saas-linux-small-${ARCH}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # build the container image for the current arch using kaniko
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --cache=true
      --cache-repo "${CI_REGISTRY_IMAGE}/buildcache"
      --build-arg "PAPER_URL=${PAPER_URL}"
      --build-arg "OPENJDK_VERSION=${OPENJDK_VERSION}"
      --dockerfile "${CI_PROJECT_DIR}/build/Containerfile"
      --destination "${CI_REGISTRY_IMAGE}/build:${ARCH}-${IMAGE_TAG}"

build-container-amd64:
  stage: container-build
  variables:
    ARCH: amd64
  tags:
    -  saas-linux-small-${ARCH}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # build the container image for the current arch using kaniko
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --cache=true
      --cache-repo "${CI_REGISTRY_IMAGE}/buildcache"
      --build-arg "PAPER_URL=${PAPER_URL}"
      --build-arg "OPENJDK_VERSION=${OPENJDK_VERSION}"
      --dockerfile "${CI_PROJECT_DIR}/build/Containerfile"
      --destination "${CI_REGISTRY_IMAGE}/build:${ARCH}-${IMAGE_TAG}"

# define a job for creating and pushing a merged manifest
merge-manifests:
  stage: merge
  image:
    name: mplatform/manifest-tool:alpine
    entrypoint: [""]
  variables:
    DOCKER_AUTH: "${CI_REGISTRY_USER}:${CI_REGISTRY_PASSWORD}"
  script:
    - mkdir -p ~/.docker
    - |
      echo "{\"auths\": {\"$CI_REGISTRY\": {\"auth\": \"$(echo -n $DOCKER_AUTH | base64)\"}}}" > ~/.docker/config.json
    - >-
      manifest-tool push from-args
      --platforms linux/amd64,linux/arm64
      --template ${CI_REGISTRY_IMAGE}/build:ARCH-${IMAGE_TAG}
      --target ${CI_REGISTRY_IMAGE}/paper
      --tags ${IMAGE_TAG}
