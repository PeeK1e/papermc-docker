image:
  name: gcr.io/kaniko-project/executor:debug

stages:
  - container-build
  - merge

variables:
  IMAGE_TAG:
    value: "1.21.5"
    description: "The Image tag to be used on builds"
  PAPER_URL:
    value: "https://api.papermc.io/v2/projects/paper/versions/1.21.5/builds/40/downloads/paper-1.21.5-40.jar"
    description: "The Paper URL"
  OPENJDK_VERSION:
    value: "24"
    description: "The image tag that should be used for openjdk's image"

# define a job for building the containers
build-container:
  stage: container-build
  # run parallel builds for the desired architectures
  parallel:
    matrix:
      - ARCH: amd64
      - ARCH: arm64
  tags:
    # run each build on a suitable, preconfigured runner (must match the target architecture)
    -  saas-linux-small-${ARCH}
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    # build the container image for the current arch using kaniko
    - |
      /kaniko/executor \
        --context "${CI_PROJECT_DIR}" \
        --build-arg "PAPER_URL=${PAPER_URL}" \
        --build-arg "OPENJDK_VERSION=${OPENJDK_VERSION}" \
        --dockerfile "${CI_PROJECT_DIR}/build/Containerfile" \
        --destination "${CI_REGISTRY_IMAGE}/build-${ARCH}:${IMAGE_TAG}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"

# define a job for creating and pushing a merged manifest
merge-manifests:
  stage: merge
  image:
    name: mplatform/manifest-tool:alpine
    entrypoint: [""]
  script:
    - >-
      manifest-tool push from-args \
      --plattforms linux/amd64,linux/arm64 \
      --template ${CI_REGISTRY_IMAGE}/build-ARCH:${IMAGE_TAG} \
      --target ${CI_REGISTRY_IMAGE}/paper:${IMAGE_TAG}
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
